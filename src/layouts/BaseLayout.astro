---
import {
  SITE_TAB,
  SITE_DESCRIPTION,
  SITE_FAVICON,
  SITE_LANGUAGE,
  SITE_THEME,
  umamiConfig,
  SITE_PAGES,
} from "@config";
import { ClientRouter } from "astro:transitions";
import ElementCrossing from "astro-vtbot/components/ElementCrossing.astro";
import PointerOnNavigation from "astro-vtbot/components/PointerOnNavigation.astro";
import Header from "@components/Header.astro";
import Sidebar from "@components/Sidebar.astro";
import Footer from "@components/Footer.astro";
import Navbar from "@components/Navbar.astro";
import Banner from "@components/Banner.astro";
import MobileTOC from "@components/widgets/MobileTOC.astro";

const {
  title,
  image,
  headings = [],
  showTOC = false,
  isIndexed = true,
  isPostPage = false,
} = Astro.props;

// 根据当前路径从配置中获取 Banner 内容
const currentPath = Astro.url.pathname.replace("/", "") || "home";
const pageConfig = SITE_PAGES?.[currentPath];
const bannerTitle = pageConfig?.title || title || "";
const bannerSubtitle = pageConfig?.subtitle || "";
---

<!doctype html>
<html
  lang={SITE_LANGUAGE}
  style="background-color: var(--custom-page-bg)"
  data-theme={SITE_THEME.light}
  data-theme-type="light"
>
  <head>
    <ClientRouter />
    <ElementCrossing />
    <PointerOnNavigation />
    <Header
      description={SITE_DESCRIPTION}
      favicon={SITE_FAVICON}
      image={image}
    />
    <title>{`${title} - ${SITE_TAB}`}</title>

    <!-- Umami分析（自建） -->
    {
      umamiConfig.enable && (
        <script
          defer
          src={`${umamiConfig.baseUrl}/script.js`}
          data-website-id={umamiConfig.websiteId}
        />
      )
    }

    <!-- Microsoft Clarity -->
    <script type="text/javascript">
      (function (c, l, a, r, i, t, y) {
        c[a] =
          c[a] ||
          function () {
            (c[a].q = c[a].q || []).push(arguments);
          };
        t = l.createElement(r);
        t.async = 1;
        t.src = "https://www.clarity.ms/tag/" + i;
        y = l.getElementsByTagName(r)[0];
        y.parentNode.insertBefore(t, y);
      })(window, document, "clarity", "script", "skz108rus8");
    </script>

    <!-- 主题管理脚本 -->
    <script define:vars={{ SITE_THEME }} is:inline>
      (function () {
        const storedTheme = localStorage.getItem("theme");
        const prefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
        let theme;
        if (storedTheme) {
          theme = storedTheme;
        } else {
          theme = prefersDark ? SITE_THEME.dark : SITE_THEME.light;
          localStorage.setItem("theme", theme);
        }
        document.documentElement.setAttribute("data-theme", theme);
        const themeType = theme === SITE_THEME.dark ? "dark" : "light";
        document.documentElement.setAttribute("data-theme-type", themeType);
        window
          .matchMedia("(prefers-color-scheme: dark)")
          .addEventListener("change", (e) => {
            if (!localStorage.getItem("theme")) {
              const newTheme = e.matches ? SITE_THEME.dark : SITE_THEME.light;
              document.documentElement.setAttribute("data-theme", newTheme);
              const newThemeType = e.matches ? "dark" : "light";
              document.documentElement.setAttribute(
                "data-theme-type",
                newThemeType,
              );
              localStorage.setItem("theme", newTheme);
            }
          });
      })();
    </script>
  </head>

  <!-- 移除上边距，让Banner从顶部开始 -->
  <body
    class="flex flex-col min-h-screen"
    {...isIndexed ? { "data-pagefind-body": true } : {}}
  >
    <Banner title={bannerTitle} subtitle={bannerSubtitle} />
    <Navbar />
    <div class="max-w-blog mx-auto w-full flex-grow">
      <div
        class="grid grid-cols-1 md:grid-cols-5 lg:grid-cols-4 gap-4 px-4 pb-4 h-full"
      >
        <main
          class="col-span-1 md:col-span-4 lg:col-span-3 bg-transparent order-1 md:order-2 flex flex-col gap-4"
        >
          <div class="flex-grow flex flex-col gap-4">
            <slot />
          </div>
          <Footer />
        </main>
        <aside class="col-span-1 bg-transparent order-2 md:order-1 md:top-4">
          <Sidebar headings={headings} showTOC={showTOC} />
          <slot name="sidebar" />
        </aside>
      </div>
    </div>


    <MobileTOC headings={headings} showTOC={showTOC} />

    <!-- 全局樱花飘落特效 -->
    <script is:inline>
      // sakura.js - 浏览器全局樱花飘落特效
      (function () {
        function getRandom(option, config) {
          let ret, random;
          switch (option) {
            case 'x': ret = Math.random() * window.innerWidth; break;
            case 'y': ret = Math.random() * window.innerHeight; break;
            case 's': ret = config.size.min + Math.random() * (config.size.max - config.size.min); break;
            case 'r': ret = Math.random() * 6; break;
            case 'fnx': random = config.speed.horizontal.min + Math.random() * (config.speed.horizontal.max - config.speed.horizontal.min); ret = function (x, y) { return x + random; }; break;
            case 'fny': random = config.speed.vertical.min + Math.random() * (config.speed.vertical.max - config.speed.vertical.min); ret = function (x, y) { return y + random; }; break;
            case 'fnr': ret = function (r) { return r + config.speed.rotation; }; break;
          }
          return ret;
        }
        function Sakura(x, y, s, r, fn, idx, img, limitArray, config) {
          this.x = x; this.y = y; this.s = s; this.r = r; this.fn = fn; this.idx = idx; this.img = img; this.limitArray = limitArray; this.config = config;
        }
        Sakura.prototype.draw = function (cxt) {
          cxt.save(); cxt.translate(this.x, this.y); cxt.rotate(this.r); cxt.drawImage(this.img, 0, 0, 40 * this.s, 40 * this.s); cxt.restore();
        };
        Sakura.prototype.update = function () {
          this.x = this.fn.x(this.x, this.y);
          this.y = this.fn.y(this.y, this.y);
          this.r = this.fn.r(this.r);
          if (this.x > window.innerWidth || this.x < 0 || this.y > window.innerHeight || this.y < 0) {
            if (this.limitArray[this.idx] === -1) { this.resetPosition(); }
            else if (this.limitArray[this.idx] > 0) { this.resetPosition(); this.limitArray[this.idx]--; }
          }
        };
        Sakura.prototype.resetPosition = function () {
          this.r = getRandom('fnr', this.config);
          if (Math.random() > 0.4) {
            this.x = getRandom('x', this.config); this.y = 0; this.s = getRandom('s', this.config); this.r = getRandom('r', this.config);
          } else {
            this.x = window.innerWidth; this.y = getRandom('y', this.config); this.s = getRandom('s', this.config); this.r = getRandom('r', this.config);
          }
        };
        function SakuraList() { this.list = []; }
        SakuraList.prototype.push = function (sakura) { this.list.push(sakura); };
        SakuraList.prototype.update = function () { for (var i = 0, len = this.list.length; i < len; i++) { this.list[i].update(); } };
        SakuraList.prototype.draw = function (cxt) { for (var i = 0, len = this.list.length; i < len; i++) { this.list[i].draw(cxt); } };
        function SakuraManager(config) {
          this.config = config; this.canvas = null; this.ctx = null; this.sakuraList = null; this.animationId = null; this.img = null; this.isRunning = false;
        }
        SakuraManager.prototype.init = function () {
          var self = this;
          if (!self.config.enable || self.isRunning) return;
          self.img = new window.Image();
          self.img.src = '/sakura.png';
          self.img.onload = function () {
            self.createCanvas();
            self.createSakuraList();
            self.startAnimation();
            self.isRunning = true;
          };
        };
        SakuraManager.prototype.createCanvas = function () {
          this.canvas = document.createElement('canvas');
          this.canvas.height = window.innerHeight;
          this.canvas.width = window.innerWidth;
          this.canvas.setAttribute('style', 'position: fixed; left: 0; top: 0; pointer-events: none; z-index: ' + this.config.zIndex + ';');
          this.canvas.setAttribute('id', 'canvas_sakura');
          document.body.appendChild(this.canvas);
          this.ctx = this.canvas.getContext('2d');
          window.addEventListener('resize', this.handleResize.bind(this));
        };
        SakuraManager.prototype.createSakuraList = function () {
          if (!this.img || !this.ctx) return;
          this.sakuraList = new SakuraList();
          var limitArray = new Array(this.config.sakuraNum).fill(this.config.limitTimes);
          for (var i = 0; i < this.config.sakuraNum; i++) {
            var sakura = new Sakura(
              getRandom('x', this.config),
              getRandom('y', this.config),
              getRandom('s', this.config),
              getRandom('r', this.config),
              { x: getRandom('fnx', this.config), y: getRandom('fny', this.config), r: getRandom('fnr', this.config) },
              i, this.img, limitArray, this.config
            );
            sakura.draw(this.ctx);
            this.sakuraList.push(sakura);
          }
        };
        SakuraManager.prototype.startAnimation = function () {
          if (!this.ctx || !this.canvas || !this.sakuraList) return;
          var self = this;
          function animate() {
            if (!self.ctx || !self.canvas || !self.sakuraList) return;
            self.ctx.clearRect(0, 0, self.canvas.width, self.canvas.height);
            self.sakuraList.update();
            self.sakuraList.draw(self.ctx);
            self.animationId = requestAnimationFrame(animate);
          }
          self.animationId = requestAnimationFrame(animate);
        };
        SakuraManager.prototype.handleResize = function () {
          if (this.canvas) {
            this.canvas.width = window.innerWidth;
            this.canvas.height = window.innerHeight;
          }
        };
        // 全局初始化
        window.initSakura = function (config) {
          if (!window.__sakuraManager) {
            window.__sakuraManager = new SakuraManager(config);
            window.__sakuraManager.init();
          } else {
            // 移除旧canvas
            var oldCanvas = document.getElementById('canvas_sakura');
            if (oldCanvas) oldCanvas.remove();
            window.__sakuraManager = new SakuraManager(config);
            window.__sakuraManager.init();
          }
        };
      })();
      function runSakura() {
        const isMobile = window.innerWidth <= 768;
        window.initSakura && window.initSakura({
          enable: true,
          sakuraNum: isMobile ? 10 : 30,
          limitTimes: -1,
          zIndex: 9999,
          size: { min: 0.6, max: 1.2 },
          speed: {
            horizontal: { min: -2, max: -0.5 },
            vertical: { min: 1.2, max: 2.2 },
            rotation: 0.01,
          },
        });
      }
      runSakura();
      window.addEventListener('resize', runSakura);
      document.addEventListener('astro:after-swap', () => {
        runSakura();
      });
    </script>

    <!-- 其余脚本保持不变 -->
    <script define:vars={{ SITE_THEME }} is:inline>
      document.addEventListener("astro:after-swap", () => {
        const storedTheme = localStorage.getItem("theme");
        if (storedTheme) {
          document.documentElement.setAttribute("data-theme", storedTheme);
          const themeType = storedTheme === SITE_THEME.dark ? "dark" : "light";
          document.documentElement.setAttribute("data-theme-type", themeType);
        }
      });
    </script>

    <script is:inline>
      document.addEventListener("astro:page-load", () => {
        document.querySelectorAll(".btn-copy").forEach((button) => {
          button.addEventListener("click", async () => {
            const codeBlock = button.closest(".ryuchan-code");
            const code = codeBlock.querySelector("code").textContent;
            const copyIcon = button.querySelector(
              ".ryuchan-code-toolbar-copy-icon",
            );
            const successIcon = button.querySelector(
              ".ryuchan-code-toolbar-copy-success",
            );
            try {
              await navigator.clipboard.writeText(code);
              copyIcon.classList.add("hidden");
              successIcon.classList.remove("hidden");
              button.classList.add("copy-success");
              setTimeout(() => {
                copyIcon.classList.remove("hidden");
                successIcon.classList.add("hidden");
                button.classList.remove("copy-success");
              }, 2000);
            } catch (err) {
              console.error("Failed to copy:", err);
            }
          });
        });
      });
    </script>

    <style is:inline>
      .btn-copy {
        position: relative;
        overflow: hidden;
      }
      .copy-success {
        animation: pulse 0.5s ease-in-out;
      }
  .ryuchan-code-toolbar-copy-success svg {
        color: #10b981;
      }
      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
        100% {
          transform: scale(1);
        }
      }
    </style>
  </body>
</html>
