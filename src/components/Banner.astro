---
import {
  BANNER_IMAGES,
  BANNER_HEIGHT,
  SITE_PAGES,
  TYPEWRITER_TEXTS,
} from "@config";

export interface Props {
  title?: string;
  subtitle?: string;
}

const { title, subtitle } = Astro.props;

// 统一所有页面都只用配置文件 SITE_PAGES
const currentPath = Astro.url.pathname;
let pageKey = "home";
if (currentPath === "/") {
  pageKey = "home";
} else if (currentPath === "/about") {
  pageKey = "about";
} else if (
  currentPath.startsWith("/blog/") &&
  !currentPath.includes("/blog/page/") &&
  currentPath !== "/blog" &&
  !currentPath.includes("/blog/tag/") &&
  !currentPath.includes("/blog/category/")
) {
  pageKey = "home"; // 博客详情页也用 home 配置
} else {
  // 其它页面如 /anime、/friend、/project、/navigation 等
  pageKey = currentPath.replace(/^\//, "");
}

const cleanPageKey = pageKey.replace(/\/$/, "");
const pageConfig =
  SITE_PAGES[cleanPageKey] ?? SITE_PAGES[pageKey] ?? SITE_PAGES["home"];
const useLargeFont =
  pageKey === "home" ||
  (currentPath.startsWith("/blog/") &&
    !currentPath.includes("/blog/page/") &&
    currentPath !== "/blog" &&
    !currentPath.includes("/blog/tag/") &&
    !currentPath.includes("/blog/category/"));
const useTypewriter =
  pageKey === "home" ||
  (currentPath.startsWith("/blog/") &&
    !currentPath.includes("/blog/page/") &&
    currentPath !== "/blog" &&
    !currentPath.includes("/blog/tag/") &&
    !currentPath.includes("/blog/category/"));
const displayTitle = pageConfig.title || "";
const displaySubtitle = pageConfig.subtitle || "";
const hasTitle = displayTitle !== undefined && displayTitle !== "";
const hasSubtitle = displaySubtitle !== undefined && displaySubtitle !== "";

// 只使用配置中的图片列表
let carouselImgsList = BANNER_IMAGES;
const carouselAnimationTime = `${carouselImgsList.length * 6}s`;
const bannerHeight = BANNER_HEIGHT;
const imageCount = Math.max(carouselImgsList.length, 1);
const hasMultipleImages = imageCount > 1;
const visiblePercent = (100 / imageCount).toFixed(4);
const fadeOutPercent = (100 / imageCount + 50 / imageCount).toFixed(4);
const animationStepSeconds = imageCount > 0
  ? Number.parseFloat(carouselAnimationTime) / imageCount
  : 0;
const carouselKeyframes = `
  @keyframes carousel-animation {
    0% {
      opacity: 0;
      transform: scale(1);
    }
    3% {
      opacity: 1;
    }
    8% {
      opacity: 1;
    }
    ${visiblePercent}% {
      opacity: 1;
    }
    ${fadeOutPercent}% {
      opacity: 0;
      transform: scale(1.35);
    }
    100% {
      opacity: 0;
      transform: scale(1.35);
    }
  }
`;
---

<div id="banner" class="banner">
  <div class="banner-inner h-full w-full">
    <!-- 始终显示轮播图片 -->
    <div
      class="carousel"
      data-has-multiple={hasMultipleImages}
      data-animation-step={animationStepSeconds}
    >
      <ul class="carousel-list">
        {
          carouselImgsList.map((img, index) => (
            <li
              class="item"
              style={{
                "--item-delay": `${index * 6}s`,
                "--item-image": `url(${img})`,
              }}
              aria-hidden="true"
            />
          ))
        }
      </ul>
    </div>

    <!-- 显示标题和副标题 -->
    {
      (hasTitle || hasSubtitle) && (
        <div class="relative h-[95%] w-full">
          <div class="absolute left-1/2 top-1/2 w-4/5 -translate-x-1/2 -translate-y-1/2 lg:w-3/4">
            <div class="flex flex-col">
              {hasTitle && (
                <h1
                  class={`title ${useLargeFont ? "text-6xl lg:text-8xl" : "text-4xl lg:text-6xl"}`}
                >
                  {displayTitle}
                </h1>
              )}
              {hasSubtitle && (
                <h2
                  class={`subtitle ${useLargeFont ? "text-2xl lg:text-4xl" : "text-lg lg:text-2xl"}`}
                >
                  {useTypewriter ? (
                    <span id="typewriter-text">{displaySubtitle}</span>
                  ) : (
                    displaySubtitle
                  )}
                </h2>
              )}
            </div>
          </div>
        </div>
      )
    }
  </div>

  <!-- 波浪动画效果 -->
  <div class="waves">
    <svg
      class="waves"
      xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      viewBox="0 24 150 28"
      preserveAspectRatio="none"
      shape-rendering="auto"
    >
      <defs>
        <path
          id="gentle-wave"
          d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"
        ></path>
      </defs>
      <g class="parallax">
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="0"
          class="opacity-25"
          style={{ animationDelay: "-2s", animationDuration: "7s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="3"
          class="opacity-50"
          style={{ animationDelay: "-3s", animationDuration: "10s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="5"
          class="opacity-75"
          style={{ animationDelay: "-4s", animationDuration: "13s" }}></use>
        <use
          xlink:href="#gentle-wave"
          x="48"
          y="7"
          style={{ animationDelay: "-5s", animationDuration: "20s" }}></use>
      </g>
    </svg>
  </div>
</div>

<!-- 打字机效果脚本 -->
<script define:vars={{ TYPEWRITER_TEXTS, useTypewriter }} is:inline>
  document.addEventListener("astro:page-load", () => {
    if (!useTypewriter || !Array.isArray(TYPEWRITER_TEXTS) || TYPEWRITER_TEXTS.length === 0) {
      return;
    }

    const typewriterElement = document.getElementById("typewriter-text");
    if (!typewriterElement) return;

    typewriterElement.classList.remove("typewriter-static");

    const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)");
    const teardowns = new Set();

    const cleanupAll = () => {
      teardowns.forEach((stop) => {
        try {
          stop();
        } catch (error) {
          console.error(error);
        }
      });
      teardowns.clear();
    };

    const startTypewriter = () => {
      let timerId;
      let currentTextIndex = 0;
      let currentCharIndex = 0;
      let isDeleting = false;

      const TYPE_SPEED = 50;
      const DELETE_SPEED = 30;
      const PAUSE_TIME = 1500;
      const NEXT_ITEM_DELAY = 300;

      const schedule = (delay, cb) => {
        timerId = window.setTimeout(cb, delay);
      };

      const stop = () => {
        if (timerId) {
          clearTimeout(timerId);
          timerId = undefined;
        }
      };

      teardowns.add(stop);

      const tick = () => {
        const currentText = TYPEWRITER_TEXTS[currentTextIndex];

        if (!isDeleting) {
          currentCharIndex = Math.min(currentCharIndex + 1, currentText.length);
        } else {
          currentCharIndex = Math.max(currentCharIndex - 1, 0);
        }

        typewriterElement.textContent = currentText.slice(0, currentCharIndex);

        if (!isDeleting && currentCharIndex === currentText.length) {
          isDeleting = true;
          schedule(PAUSE_TIME, tick);
          return;
        }

        if (isDeleting && currentCharIndex === 0) {
          isDeleting = false;
          currentTextIndex = (currentTextIndex + 1) % TYPEWRITER_TEXTS.length;
          schedule(NEXT_ITEM_DELAY, tick);
          return;
        }

        schedule(isDeleting ? DELETE_SPEED : TYPE_SPEED, tick);
      };

      schedule(400, tick);
    };

    if (prefersReducedMotion.matches) {
      typewriterElement.textContent = TYPEWRITER_TEXTS[0];
      typewriterElement.classList.add("typewriter-static");
      return;
    }

    typewriterElement.textContent = "";

    const observer = new IntersectionObserver((entries) => {
      const entry = entries.find((item) => item.isIntersecting);
      if (!entry) return;
      observer.disconnect();
      startTypewriter();
    }, {
      threshold: 0.4,
      rootMargin: "0px 0px -20% 0px",
    });

    observer.observe(typewriterElement);
    teardowns.add(() => observer.disconnect());

    const handleMotionChange = (event) => {
      if (!event.matches) {
        return;
      }
      cleanupAll();
      typewriterElement.textContent = TYPEWRITER_TEXTS[0];
      typewriterElement.classList.add("typewriter-static");
    };

    prefersReducedMotion.addEventListener("change", handleMotionChange);
    teardowns.add(() => prefersReducedMotion.removeEventListener("change", handleMotionChange));

    document.addEventListener("astro:before-swap", cleanupAll, { once: true });
  });
</script>

<script define:vars={{ imageCount }} is:inline>
  document.addEventListener("astro:page-load", () => {
    if (typeof window === "undefined") return;
    if (!Number.isFinite(imageCount) || imageCount <= 1) {
      return;
    }

    const totalDuration = imageCount * 6;
    if (totalDuration <= 0) return;

    const bannerElement = document.getElementById("banner");
    if (!bannerElement) return;

    if (typeof window.__bannerStartTime !== "number") {
      window.__bannerStartTime = performance.now();
    }

    const now = performance.now();
    const elapsedSeconds = ((now - window.__bannerStartTime) / 1000) % totalDuration;
    bannerElement.style.setProperty("--carousel-offset", `${elapsedSeconds}s`);
  });
</script>

<!-- 随机化轮播起始顺序 -->
<script is:inline>
  const randomizeCarousel = () => {
    const carousel = document.querySelector("#banner .carousel");
    if (!carousel) return;

    const animationStep = Number.parseFloat(
      carousel.dataset.animationStep ?? "0",
    );
    if (!Number.isFinite(animationStep) || animationStep <= 0) {
      return;
    }

    const items = Array.from(
      carousel.querySelectorAll(".carousel-list .item"),
    );

    if (items.length <= 1) return;

    const delays = items.map((_, index) => index * animationStep);

    for (let i = delays.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      const temp = delays[i];
      delays[i] = delays[j];
      delays[j] = temp;
    }

    items.forEach((item, index) => {
      item.style.setProperty("--item-delay", `${delays[index]}s`);
    });
  };

  randomizeCarousel();
  document.addEventListener("astro:page-load", randomizeCarousel);
  document.addEventListener("astro:after-swap", randomizeCarousel);
</script>

{carouselKeyframes && (
  <style is:inline set:html={carouselKeyframes}></style>
)}

<style define:vars={{ carouselAnimationTime, bannerHeight }}>
  .banner {
    @apply relative opacity-100;
    --carousel-offset: 0s;
    height: var(--bannerHeight);
  }

  .carousel {
    @apply absolute left-0 top-0 -z-10 block w-full overflow-hidden bg-base-200;
    height: var(--bannerHeight);
  }

  .carousel-list {
    @apply relative block h-full w-full;
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .carousel::before {
    @apply absolute left-0 top-0 z-10 block h-full w-full bg-black/25 transition-all content-[''];
    @apply dark:bg-black/30;
  }

  .carousel .item {
    @apply absolute left-0 top-0 z-0 h-full w-full origin-center bg-cover bg-center bg-no-repeat opacity-0;
    animation: carousel-animation var(--carouselAnimationTime) linear infinite
      0s;
    animation-delay: calc(var(--item-delay, 0s) - var(--carousel-offset, 0s));
    backface-visibility: hidden;
    transform-style: preserve-3d;
    background-image: var(--item-image);
  }

  .carousel[data-has-multiple="false"] .item {
    animation: none;
    opacity: 1;
    transform: none;
  }

  .title {
    @apply mt-8 text-center font-bold drop-shadow-lg lg:mt-1;
    font-family: var(--title-font);
    color: white;
    line-height: 1.3;
  }

  .subtitle {
    @apply text-center drop-shadow-md;
    font-family: var(--subtitle-font);
    color: white;
    white-space: pre-line;
    line-height: 1.3;
  }

  /* 打字机光标效果 */
  #typewriter-text::after {
    content: "|";
    animation: blink 1s infinite;
    color: white;
  }

  .typewriter-static::after {
    animation: none;
    opacity: 0;
  }

  @keyframes blink {
    0%,
    50% {
      opacity: 1;
    }
    51%,
    100% {
      opacity: 0;
    }
  }

  .waves {
    @apply absolute -bottom-[1px] h-[10vh] max-h-[9.375rem] min-h-[3.125rem] w-full;
    @apply md:h-[15vh];
  }

  .waves > .parallax use {
    fill: var(--custom-page-bg);
    animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
  }

  @keyframes wave {
    0% {
      transform: translate3d(-90px, 0, 0);
    }
    100% {
      transform: translate3d(85px, 0, 0);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .carousel .item {
      animation: none;
      opacity: 0;
      transform: none;
    }

    .carousel .item:first-child {
      opacity: 1;
    }

    .waves > .parallax use {
      animation: none;
    }
  }
</style>
